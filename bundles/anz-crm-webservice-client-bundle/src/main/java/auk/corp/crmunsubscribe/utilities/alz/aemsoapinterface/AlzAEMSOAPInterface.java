
package auk.corp.crmunsubscribe.utilities.alz.aemsoapinterface;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;




/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "AlzAEMSOAPInterface", targetNamespace = "urn:alz:AEMSOAPInterface", wsdlLocation = "file:/C:/crm/unsub.schemawsdl.wsdl")
public class AlzAEMSOAPInterface
    extends Service
{

    private final static URL ALZAEMSOAPINTERFACE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(auk.corp.crmunsubscribe.utilities.alz.aemsoapinterface.AlzAEMSOAPInterface.class.getName());

    static {
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = auk.corp.crmunsubscribe.utilities.alz.aemsoapinterface.AlzAEMSOAPInterface.class.getResource(".");
          
            url = AlzAEMSOAPInterface.class.getClassLoader()
					.getResource("WSDL/unsub.schemawsdl.wsdl");
            
        } catch (Exception e) {
            logger.warning("Failed to create URL for the wsdl Location: 'file:/C:/crm/unsub.schemawsdl.wsdl', retrying as a local file");
            logger.warning(e.getMessage());
        }
        ALZAEMSOAPINTERFACE_WSDL_LOCATION = url;
    }

    public AlzAEMSOAPInterface(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AlzAEMSOAPInterface() {
        super(ALZAEMSOAPINTERFACE_WSDL_LOCATION, new QName("urn:alz:AEMSOAPInterface", "AlzAEMSOAPInterface"));
    }

    /**
     * 
     * @return
     *     returns AEMSOAPInterfaceMethodsSoap
     */
    @WebEndpoint(name = "AEMSOAPInterfaceMethodsSoap")
    public AEMSOAPInterfaceMethodsSoap getAEMSOAPInterfaceMethodsSoap() {
        return super.getPort(new QName("urn:alz:AEMSOAPInterface", "AEMSOAPInterfaceMethodsSoap"), AEMSOAPInterfaceMethodsSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AEMSOAPInterfaceMethodsSoap
     */
    @WebEndpoint(name = "AEMSOAPInterfaceMethodsSoap")
    public AEMSOAPInterfaceMethodsSoap getAEMSOAPInterfaceMethodsSoap(WebServiceFeature... features) {
        return super.getPort(new QName("urn:alz:AEMSOAPInterface", "AEMSOAPInterfaceMethodsSoap"), AEMSOAPInterfaceMethodsSoap.class, features);
    }

}
